// Generated by CoffeeScript 1.6.3
(function() {
  var async, cert_to_jwk, cert_to_x5c, fs, hex_to_base64url, pem;

  async = require('async');

  pem = require('pem');

  fs = require('fs');

  hex_to_base64url = function(hex) {
    var b64;
    b64 = new Buffer(hex, 'hex').toString('base64');
    return b64.replace(/\=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
  };

  exports.cert_to_x5c = cert_to_x5c = function(cert, maxdepth) {
    if (maxdepth == null) {
      maxdepth = 0;
    }
    cert = cert.replace(/-----[^\n]+\n?/gm, ',').replace(/\n/g, '');
    cert = cert.split(',').filter(function(c) {
      return c.length > 0;
    });
    if (maxdepth > 0) {
      cert = cert.splice(0, maxdepth);
    }
    return cert;
  };

  exports.cert_to_jwk = cert_to_jwk = function(cert, maxdepth, cb) {
    return async.parallel([
      function(c) {
        return pem.getModulus(cert, c);
      }, function(c) {
        return pem.getFingerprint(cert, c);
      }, function(c) {
        return pem.readCertificateInfo(cert, c);
      }
    ], function(er, results) {
      var cn, fing, modulus, _ref, _ref1, _ref2;
      if (er) {
        cb(er);
      }
      (_ref = results[0], modulus = _ref.modulus), (_ref1 = results[1], fing = _ref1.fingerprint), (_ref2 = results[2], cn = _ref2.commonName);
      modulus = hex_to_base64url(modulus);
      fing = hex_to_base64url(fing.replace(/:/g, ''));
      cert = cert_to_x5c(cert, maxdepth);
      return cb(null, {
        kty: "RSA",
        kid: "" + cn + ":" + fing,
        n: modulus,
        e: "AQAB",
        x5c: cert
      });
    });
  };

  exports.create = function(certs, maxdepth, cb) {
    if (certs.length === 0) {
      return cb(new Error('No certs specified'));
    }
    return async.map(certs, function(item, c) {
      return cert_to_jwk(item, maxdepth, c);
    }, function(er, results) {
      if (er) {
        return cb(er);
      }
      return cb(null, {
        keys: results
      });
    });
  };

  exports.write = function(dir, service, posh, cb) {
    return fs.writeFile("" + dir + "/posh." + service + ".json", JSON.stringify(posh), cb);
  };

}).call(this);
